[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "personalparakeet"
version = "2.1.0"
description = "Real-time dictation system with AI corrections using NVIDIA Parakeet-TDT"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "PersonalParakeet Team"}
]
keywords = ["dictation", "speech-to-text", "ai", "parakeet", "nemo"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Office/Business",
]

dependencies = [
    "torch>=2.0.0",
    "nemo-toolkit[asr]>=1.15.0",
    "sounddevice>=0.4.5",
    "numpy>=1.21.0",
    "PyQt5>=5.15.0",
    "pyautogui>=0.9.54",
    "pywin32>=306; sys_platform=='win32'",
    "pynput>=1.7.6",
    "websockets>=11.0.0",
    "aiohttp>=3.8.0",
    "requests>=2.28.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-timeout>=2.1.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
]

test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-timeout>=2.1.0",
]

flet = [
    "flet>=0.21.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/PersonalParakeet"
Documentation = "https://yourusername.github.io/PersonalParakeet"
Repository = "https://github.com/yourusername/PersonalParakeet.git"
Issues = "https://github.com/yourusername/PersonalParakeet/issues"

[project.scripts]
personalparakeet = "personalparakeet.__main__:main"
personalparakeet-v3 = "v3-flet.main:run_app"

[tool.setuptools]
packages = ["personalparakeet"]

[tool.setuptools.package-data]
personalparakeet = ["*.json", "*.yaml", "*.yml"]

# Testing configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
    "v3-flet/tests"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "manual: Manual tests requiring user interaction", 
    "hardware: Tests requiring hardware (audio, etc.)",
    "slow: Tests that take more than 10 seconds",
    "v2: Tests for v2 implementation",
    "v3: Tests for v3 Flet implementation",
]

# Code formatting with Black
[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | archive
)/
'''

# Import sorting with isort
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# Type checking with mypy
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Gradually enable strict typing
ignore_missing_imports = true

# Exclude directories
exclude = [
    "archive/",
    "tests/manual/",
    "build/",
    "dist/",
]

# Coverage configuration
[tool.coverage.run]
source = ["personalparakeet", "v3-flet"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "archive/*",
    "build/*",
    "dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
[tool.poetry]
name = "personalparakeet"
version = "3.0.0"
description = "Real-time dictation system with transparent floating UI"
authors = ["PersonalParakeet Team"]
readme = "README.md"
packages = [{include = "personalparakeet", from = "src"}]
include = [
    "src/personalparakeet/models/*.onnx",
    "src/personalparakeet/models/*.pt",
    "src/personalparakeet/models/*.json",
    "src/personalparakeet/assets/**/*"
]

[tool.poetry.dependencies]
python = "^3.11"

# Core Audio/Scientific Stack (required for all modes)
numpy = "^1.26.0"  # Audio processing arrays
scipy = "^1.11.0"  # Signal processing for resampling
sounddevice = "^0.4.6"  # Primary audio capture
soundfile = "^0.12.0"  # Audio file I/O
pyaudio = "^0.2.11"  # Alternative audio backend

# UI Framework
# flet = "^0.28.3"  # REMOVED - replaced with Rust + egui  # Cross-platform Flutter-based UI

# System Integration
python-dotenv = "^1.0.0"  # Environment configuration
keyboard = "^0.13.5"  # Global hotkey support
pynput = "^1.8.1"  # Cross-platform input handling
pyperclip = "^1.9.0"  # Clipboard operations

# Configuration & Data
hydra-core = "^1.3.2"  # Configuration framework
omegaconf = "^2.3.0"  # YAML config support
dataclasses-json = "^0.6.0"  # JSON serialization

# Optional Dependencies
networkx = "^3.5"  # Graph algorithms for thought linking
packaging = "^24.0"  # Version parsing utilities
cython = "^3.1.2"  # Build optimization

# ML Dependencies Note:
# PyTorch, NeMo, and other ML packages are managed separately via:
# - requirements-torch.txt (PyTorch with CUDA 12.8 for RTX 5090)
# - requirements-ml.txt (NeMo toolkit and related ML packages)
# This separation is required due to complex version constraints and
# custom package indices that Poetry cannot handle effectively.
python-xlib = "^0.33"

[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.0.0"
black = "^24.3.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
mypy = "^1.0.0"
ruff = "^0.8.0"
maturin = "^1.5.0"
openai-whisper = "^20250625"  # For dev/testing alternative STT
gtts = "^2.5.4"  # Text-to-speech for testing
pre-commit = "^4.2.0"

[tool.poetry.scripts]
personalparakeet = "personalparakeet.main:main"

[build-system]
requires = ["maturin>=1.0,<2.0"]
build-backend = "maturin"

[tool.maturin]
features = ["pyo3/extension-module"]
python-source = "src"
strip = true

[tool.black]
line-length = 100
target-version = ['py311']

[tool.isort]
profile = "black"
line_length = 100

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true

[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["E712"]  # Allow == False in tests

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"

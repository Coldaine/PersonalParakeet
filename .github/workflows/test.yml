name: PersonalParakeet v3 Test Suite

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggering

env:
  PYTHON_VERSION: '3.11'
  PARAKEET_TEST_MODE: 'true'
  PARAKEET_MOCK_AUDIO: 'true'

jobs:
  test-v3-core:
    name: Test v3 Core Components
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11']
      fail-fast: false
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev pulseaudio xvfb python3-xlib python3-ewmh
        # Set up virtual display for headless testing
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install portaudio
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        pip install pytest pytest-cov pytest-asyncio pytest-mock pytest-xdist
        pip install coverage[toml] pytest-html pytest-json-report
        # Install v3 dependencies
        pip install -e .
        # Install ML dependencies for testing
        pip install -r requirements-torch.txt
        pip install -r requirements-ml.txt
        
    - name: Create test reports directory
      run: mkdir -p test-reports
      
    - name: Run unit tests
      run: |
        pytest tests/core/ tests/unit/ \
          --cov=src/personalparakeet/core \
          --cov-report=xml:test-reports/coverage-core.xml \
          --cov-report=html:test-reports/htmlcov-core \
          --junit-xml=test-reports/junit-core.xml \
          --json-report --json-report-file=test-reports/report-core.json \
          -v --tb=short \
          -m "unit and not slow"
          
    - name: Run integration tests
      run: |
        pytest tests/integration/ \
          --cov=src/personalparakeet/core \
          --cov-append \
          --cov-report=xml:test-reports/coverage-integration.xml \
          --junit-xml=test-reports/junit-integration.xml \
          --json-report --json-report-file=test-reports/report-integration.json \
          -v --tb=short \
          -m "integration and not slow"
          
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: test-reports/
        retention-days: 30
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      with:
        file: test-reports/coverage-core.xml
        flags: core
        name: core-coverage
        fail_ci_if_error: false

  test-v3-performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test-v3-core
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev pulseaudio xvfb
        python -m pip install --upgrade pip
        pip install pytest pytest-benchmark pytest-timeout
        pip install -e .
        # Install ML dependencies for testing
        pip install -r requirements-torch.txt
        pip install -r requirements-ml.txt
        
    - name: Run performance tests
      run: |
        pytest tests/ \
          --benchmark-only \
          --benchmark-json=test-reports/benchmark.json \
          --timeout=300 \
          -v -m "performance or slow"
          
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: test-reports/benchmark.json

  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy bandit safety pylint
        pip install -e .
        # Install ML dependencies for testing
        pip install -r requirements-torch.txt
        pip install -r requirements-ml.txt
        
    - name: Check code formatting (Black)
      run: |
        black --check --diff src/personalparakeet/ tests/
        
    - name: Check import sorting (isort)
      run: |
        isort --check-only --diff src/personalparakeet/ tests/
        
    - name: Lint with flake8
      run: |
        flake8 src/personalparakeet/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/personalparakeet/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: Type checking with mypy
      run: |
        mypy src/personalparakeet/ --ignore-missing-imports --no-strict-optional
        
    - name: Security scan with bandit
      run: |
        bandit -r src/personalparakeet/ -f json -o security-report.json || true
        
    - name: Dependency security check
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          security-report.json
          safety-report.json

  test-coverage-report:
    name: Generate Coverage Report
    runs-on: ubuntu-latest
    needs: test-v3-core
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Download all test artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: test-results-*
        path: downloaded-reports
        merge-multiple: true
        
    - name: Install coverage tools
      run: |
        python -m pip install --upgrade pip
        pip install coverage[toml] coverage-badge
        
    - name: Combine coverage reports
      run: |
        coverage combine downloaded-reports/
        coverage report --show-missing
        coverage html -d coverage-html
        coverage xml -o coverage.xml
        coverage-badge -o coverage-badge.svg
        
    - name: Upload combined coverage
      uses: actions/upload-artifact@v4
      with:
        name: final-coverage-report
        path: |
          coverage-html/
          coverage.xml
          coverage-badge.svg
          
    - name: Coverage comment
      if: github.event_name == 'pull_request'
      run: |
        echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
        coverage report --format=markdown >> $GITHUB_STEP_SUMMARY

  integration-test:
    name: Full Integration Test
    runs-on: ubuntu-latest
    needs: [test-v3-core, code-quality]
    if: always() && needs.test-v3-core.result == 'success'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev pulseaudio xvfb
        python -m pip install --upgrade pip
        pip install pytest pytest-timeout
        pip install -e .
        # Install ML dependencies for testing
        pip install -r requirements-torch.txt
        pip install -r requirements-ml.txt
        
    - name: Download test artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: test-results-ubuntu-latest-py3.11
        path: test-artifacts
        
    - name: Run end-to-end tests
      timeout-minutes: 10
      run: |
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        pytest tests/ \
          --timeout=300 \
          -v -m "e2e" \
          --tb=short
          
    - name: Verify test results
      run: |
        python -c "
        import json
        import sys
        from pathlib import Path
        
        # Check test artifacts
        artifacts = list(Path('test-artifacts').rglob('*.json'))
        
        if not artifacts:
            print('No test artifacts found!')
            sys.exit(1)
            
        for artifact in artifacts:
            with open(artifact) as f:
                data = json.load(f)
                if 'tests' in data:
                    failed = data.get('summary', {}).get('failed', 0)
                    if failed > 0:
                        print(f'Tests failed in {artifact}: {failed} failures')
                        sys.exit(1)
        
        print('All integration checks passed!')
        "
        
    - name: Create final test report
      run: |
        echo "# PersonalParakeet v3 Test Report" > final-report.md
        echo "**Date:** $(date)" >> final-report.md
        echo "**Branch:** ${{ github.ref }}" >> final-report.md
        echo "**Commit:** ${{ github.sha }}" >> final-report.md
        echo "" >> final-report.md
        echo "## Test Summary" >> final-report.md
        echo "✅ Core component tests: PASSED" >> final-report.md
        echo "✅ Integration tests: PASSED" >> final-report.md
        echo "✅ Code quality checks: PASSED" >> final-report.md
        echo "✅ Security scans: COMPLETED" >> final-report.md
        echo "" >> final-report.md
        echo "## Coverage" >> final-report.md
        echo "Target: 80% minimum" >> final-report.md
        
    - name: Upload final report
      uses: actions/upload-artifact@v4
      with:
        name: final-test-report
        path: final-report.md

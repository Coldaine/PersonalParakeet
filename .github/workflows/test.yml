name: PersonalParakeet Test Suite

on:
  push:
    branches: [ main, develop, flet-v3-refactor ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  test-v2:
    name: Test v2 Components
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev pulseaudio
        # Virtual audio for headless testing
        sudo apt-get install -y xvfb
    
    - name: Install Python dependencies for v2
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Install test dependencies
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Run v2 comprehensive tests
      run: |
        cd tests
        python run_all_tests.py
      env:
        DISPLAY: ':99'
        PULSE_RUNTIME_PATH: /tmp/pulse
    
    - name: Upload v2 test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: v2-test-results
        path: tests/test_results*.json

  test-v3:
    name: Test v3 Flet Implementation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev pulseaudio
        # Virtual display for Flet GUI testing
        sudo apt-get install -y xvfb
    
    - name: Install Python dependencies for v3
      run: |
        cd v3-flet
        python -m pip install --upgrade pip
        pip install -r requirements-v3.txt
        # Install test dependencies
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Run v3 test suite
      run: |
        cd v3-flet
        xvfb-run -a python run_tests.py
      env:
        DISPLAY: ':99'
        PULSE_RUNTIME_PATH: /tmp/pulse
    
    - name: Upload v3 test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: v3-test-results
        path: v3-flet/test_results*.json

  test-windows:
    name: Test Windows Compatibility
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Windows-specific dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pywin32 pyautogui
    
    - name: Install v2 dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Run Windows-specific v2 tests
      run: |
        cd tests
        python -c "import sys; sys.path.append('..'); from tests.unit.test_clipboard_managers import *; from tests.integration.test_windows_injection import *; print('Windows imports successful')"
    
    - name: Install v3 dependencies
      run: |
        cd v3-flet
        pip install -r requirements-v3.txt
    
    - name: Run v3 component tests (Windows)
      run: |
        cd v3-flet
        python -m pytest tests/test_components.py -v
    
    - name: Upload Windows test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: windows-test-results
        path: |
          tests/test_results*.json
          v3-flet/test_results*.json

  lint-and-format:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
    
    - name: Run flake8 linting
      run: |
        flake8 personalparakeet/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 v3-flet/ --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --diff personalparakeet/
        black --check --diff v3-flet/
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff personalparakeet/
        isort --check-only --diff v3-flet/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run bandit security scan
      run: |
        bandit -r personalparakeet/ -f json -o bandit-report.json || true
        bandit -r v3-flet/ -f json -o bandit-v3-report.json || true
    
    - name: Run safety dependency check
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          bandit-v3-report.json
          safety-report.json

  integration-smoke-test:
    name: Integration Smoke Test
    runs-on: ubuntu-latest
    needs: [test-v2, test-v3]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev pulseaudio xvfb
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        cd v3-flet && pip install -r requirements-v3.txt
    
    - name: Download test artifacts
      uses: actions/download-artifact@v3
      with:
        name: v2-test-results
        path: ./test-artifacts/v2/
    
    - name: Download v3 test artifacts
      uses: actions/download-artifact@v3
      with:
        name: v3-test-results
        path: ./test-artifacts/v3/
    
    - name: Verify all tests passed
      run: |
        python -c "
        import json
        import sys
        from pathlib import Path
        
        # Check v2 results
        v2_results = list(Path('./test-artifacts/v2/').glob('*.json'))
        v3_results = list(Path('./test-artifacts/v3/').glob('*.json'))
        
        all_passed = True
        
        for result_file in v2_results + v3_results:
            with open(result_file) as f:
                data = json.load(f)
                if data.get('overall_status') != 'PASS':
                    print(f'FAILED: {result_file}')
                    all_passed = False
                else:
                    print(f'PASSED: {result_file}')
        
        if not all_passed:
            print('Some tests failed!')
            sys.exit(1)
        else:
            print('All integration tests passed!')
        "
    
    - name: Create integration report
      run: |
        echo "# PersonalParakeet Integration Test Report" > integration-report.md
        echo "Date: $(date)" >> integration-report.md
        echo "Branch: ${{ github.ref }}" >> integration-report.md
        echo "Commit: ${{ github.sha }}" >> integration-report.md
        echo "" >> integration-report.md
        echo "## Test Results" >> integration-report.md
        echo "✅ v2 Tests: $(ls test-artifacts/v2/*.json | wc -l) files" >> integration-report.md
        echo "✅ v3 Tests: $(ls test-artifacts/v3/*.json | wc -l) files" >> integration-report.md
        echo "✅ Integration smoke test: PASSED" >> integration-report.md
    
    - name: Upload integration report
      uses: actions/upload-artifact@v3
      with:
        name: integration-report
        path: integration-report.md
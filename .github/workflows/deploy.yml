name: Build and Deploy

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags
  release:
    types: [published]
  workflow_dispatch:  # Allow manual triggering
    inputs:
      version:
        description: 'Version to deploy'
        required: true
        default: 'dev'

jobs:
  build-v3-executable:
    name: Build v3 Executable
    runs-on: windows-latest  # Build on Windows for Windows executable
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd v3-flet
        pip install -r requirements-v3.txt
        pip install pyinstaller
    
    - name: Run tests before build
      run: |
        cd v3-flet
        python run_tests.py
    
    - name: Build executable with PyInstaller
      run: |
        cd v3-flet
        pyinstaller --name PersonalParakeet-v3 --onefile --windowed --add-data "assets;assets" main.py
    
    - name: Test executable
      run: |
        cd v3-flet/dist
        # Quick smoke test - just verify it starts and exits cleanly
        timeout 10 ./PersonalParakeet-v3.exe || echo "Expected timeout"
    
    - name: Upload executable artifact
      uses: actions/upload-artifact@v3
      with:
        name: PersonalParakeet-v3-Windows
        path: v3-flet/dist/PersonalParakeet-v3.exe
    
    - name: Create release notes
      run: |
        echo "# PersonalParakeet v3 Release" > release-notes.md
        echo "Built: $(date)" >> release-notes.md
        echo "Commit: ${{ github.sha }}" >> release-notes.md
        echo "" >> release-notes.md
        echo "## Features" >> release-notes.md
        echo "- Single-process Flet architecture" >> release-notes.md
        echo "- Real-time dictation with AI corrections" >> release-notes.md  
        echo "- Transparent floating UI" >> release-notes.md
        echo "- NVIDIA Parakeet-TDT integration" >> release-notes.md
        echo "" >> release-notes.md
        echo "## Installation" >> release-notes.md
        echo "1. Download PersonalParakeet-v3.exe" >> release-notes.md
        echo "2. Run as administrator (first time only)" >> release-notes.md
        echo "3. Configure audio settings as needed" >> release-notes.md
    
    - name: Upload release notes
      uses: actions/upload-artifact@v3
      with:
        name: release-notes
        path: release-notes.md

  build-v2-package:
    name: Build v2 Package
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build wheel
    
    - name: Run v2 tests
      run: |
        cd tests
        python run_all_tests.py
    
    - name: Build Python package
      run: |
        python -m build
    
    - name: Upload package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: PersonalParakeet-v2-Package
        path: dist/

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-v3-executable, build-v2-package]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download v3 executable
      uses: actions/download-artifact@v3
      with:
        name: PersonalParakeet-v3-Windows
        path: ./artifacts/v3/
    
    - name: Download v2 package
      uses: actions/download-artifact@v3
      with:
        name: PersonalParakeet-v2-Package
        path: ./artifacts/v2/
    
    - name: Download release notes
      uses: actions/download-artifact@v3
      with:
        name: release-notes
        path: ./artifacts/
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./artifacts/v3/PersonalParakeet-v3.exe
          ./artifacts/v2/*.whl
          ./artifacts/v2/*.tar.gz
        body_path: ./artifacts/release-notes.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-docs:
    name: Deploy Documentation  
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install documentation tools
      run: |
        python -m pip install --upgrade pip
        pip install mkdocs mkdocs-material
    
    - name: Generate API documentation
      run: |
        mkdir -p docs/api
        # Generate module documentation
        python -c "
        import inspect
        import sys
        sys.path.append('.')
        from personalparakeet import config, constants, clarity_engine
        
        with open('docs/api/modules.md', 'w') as f:
            f.write('# API Documentation\\n\\n')
            f.write('## Core Modules\\n\\n')
            f.write('### Configuration\\n')
            f.write(f'```python\\n{inspect.getsource(config)}\\n```\\n\\n')
        "
    
    - name: Build documentation
      run: |
        # Create simple docs structure if mkdocs.yml doesn't exist
        if [ ! -f mkdocs.yml ]; then
          cat > mkdocs.yml << EOF
        site_name: PersonalParakeet Documentation
        site_description: Real-time dictation system with AI corrections
        
        nav:
          - Home: README.md
          - Architecture: docs/Architecture_Decision_Record_Flet.md
          - Setup: docs/DICTATION_VIEW_SETUP_GUIDE.md
          - Testing: docs/testing/TESTING_CHECKLIST.md
          - API: docs/api/modules.md
        
        theme: material
        EOF
        fi
        mkdocs build
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site